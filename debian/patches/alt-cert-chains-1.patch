Backport of:

From f7bf8e02dfcb2c02bc12a59276d0a3ba43e6c204 Mon Sep 17 00:00:00 2001
From: Matt Caswell <matt@openssl.org>
Date: Tue, 27 Jan 2015 10:03:29 +0000
Subject: [PATCH] In certain situations the server provided certificate chain
 may no longer be valid. However the issuer of the leaf, or some intermediate
 cert is in fact in the trust store.

When building a trust chain if the first attempt fails, then try to see if
alternate chains could be constructed that are trusted.

RT3637
RT3621

Reviewed-by: Kurt Roeckx <kurt@roeckx.be>
---
 crypto/x509/x509_vfy.c | 165 +++++++++++++++++++++++++++++--------------------
 1 file changed, 98 insertions(+), 67 deletions(-)

Index: openssl-1.0.1f/crypto/x509/x509_vfy.c
===================================================================
--- openssl-1.0.1f.orig/crypto/x509/x509_vfy.c	2016-02-05 15:45:12.062806522 -0500
+++ openssl-1.0.1f/crypto/x509/x509_vfy.c	2016-02-05 15:55:56.873867283 -0500
@@ -153,11 +153,11 @@
 
 int X509_verify_cert(X509_STORE_CTX *ctx)
 	{
-	X509 *x,*xtmp,*chain_ss=NULL;
+	X509 *x,*xtmp,*xtmp2,*chain_ss=NULL;
 	int bad_chain = 0;
 	X509_VERIFY_PARAM *param = ctx->param;
 	int depth,i,ok=0;
-	int num;
+	int num,j,retry;
 	int (*cb)(int xok,X509_STORE_CTX *xctx);
 	STACK_OF(X509) *sktmp=NULL;
 	if (ctx->cert == NULL)
@@ -231,82 +231,114 @@
 		break;
 		}
 
+	/* Remember how many untrusted certs we have */
+	j = num;
 	/* at this point, chain should contain a list of untrusted
 	 * certificates.  We now need to add at least one trusted one,
 	 * if possible, otherwise we complain. */
 
-	/* Examine last certificate in chain and see if it
- 	 * is self signed.
- 	 */
-
-	i=sk_X509_num(ctx->chain);
-	x=sk_X509_value(ctx->chain,i-1);
-	if (ctx->check_issued(ctx, x, x))
-		{
-		/* we have a self signed certificate */
-		if (sk_X509_num(ctx->chain) == 1)
-			{
-			/* We have a single self signed certificate: see if
-			 * we can find it in the store. We must have an exact
-			 * match to avoid possible impersonation.
-			 */
-			ok = ctx->get_issuer(&xtmp, ctx, x);
-			if ((ok <= 0) || X509_cmp(x, xtmp)) 
-				{
-				ctx->error=X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT;
-				ctx->current_cert=x;
-				ctx->error_depth=i-1;
-				if (ok == 1) X509_free(xtmp);
-				bad_chain = 1;
-				ok=cb(0,ctx);
-				if (!ok) goto end;
-				}
-			else 
-				{
-				/* We have a match: replace certificate with store version
-				 * so we get any trust settings.
+	do {
+		/*
+		 * Examine last certificate in chain and see if it is self signed.
+		 */
+		i = sk_X509_num(ctx->chain);
+		x = sk_X509_value(ctx->chain, i - 1);
+		if (ctx->check_issued(ctx, x, x)) {
+			/* we have a self signed certificate */
+			if (sk_X509_num(ctx->chain) == 1) {
+				/*
+				 * We have a single self signed certificate: see if we can
+				 * find it in the store. We must have an exact match to avoid
+				 * possible impersonation.
 				 */
-				X509_free(x);
-				x = xtmp;
-				(void)sk_X509_set(ctx->chain, i - 1, x);
-				ctx->last_untrusted=0;
+				ok = ctx->get_issuer(&xtmp, ctx, x);
+				if ((ok <= 0) || X509_cmp(x, xtmp)) {
+					ctx->error = X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT;
+					ctx->current_cert = x;
+					ctx->error_depth = i - 1;
+					if (ok == 1)
+						X509_free(xtmp);
+					bad_chain = 1;
+					ok = cb(0, ctx);
+					if (!ok)
+						goto end;
+				} else {
+					/*
+					 * We have a match: replace certificate with store
+					 * version so we get any trust settings.
+					 */
+					X509_free(x);
+					x = xtmp;
+					(void)sk_X509_set(ctx->chain, i - 1, x);
+					ctx->last_untrusted = 0;
 				}
+			} else {
+				/* extract and save self signed certificate for later use
+				 */
+				chain_ss = sk_X509_pop(ctx->chain);
+				ctx->last_untrusted--;
+				num--;
+				j--;
+				x = sk_X509_value(ctx->chain, num - 1);
 			}
-		else
-			{
-			/* extract and save self signed certificate for later use */
-			chain_ss=sk_X509_pop(ctx->chain);
-			ctx->last_untrusted--;
-			num--;
-			x=sk_X509_value(ctx->chain,num-1);
+
+		}
+		/* We now lookup certs from the certificate store */
+		for (;;) {
+			/* If we have enough, we break */
+			if (depth < num)
+				break;
+			/* If we are self signed, we break */
+			if (ctx->check_issued(ctx, x, x))
+				break;
+			ok = ctx->get_issuer(&xtmp, ctx, x);
+			if (ok < 0)
+				return ok;
+			if (ok == 0)
+				break;
+			x = xtmp;
+			if (!sk_X509_push(ctx->chain, x)) {
+				X509_free(xtmp);
+				X509err(X509_F_X509_VERIFY_CERT, ERR_R_MALLOC_FAILURE);
+				return 0;
 			}
+			num++;
 		}
 
-	/* We now lookup certs from the certificate store */
-	for (;;)
-		{
-		/* If we have enough, we break */
-		if (depth < num) break;
-
-		/* If we are self signed, we break */
-		if (ctx->check_issued(ctx,x,x)) break;
-
-		ok = ctx->get_issuer(&xtmp, ctx, x);
-
-		if (ok < 0) return ok;
-		if (ok == 0) break;
-
-		x = xtmp;
-		if (!sk_X509_push(ctx->chain,x))
-			{
-			X509_free(xtmp);
-			X509err(X509_F_X509_VERIFY_CERT,ERR_R_MALLOC_FAILURE);
-			return 0;
+		/*
+		 * If we haven't got a least one certificate from our store then check
+		 * if there is an alternative chain that could be used.
+		 */
+		retry = 0;
+		if (j == ctx->last_untrusted) {
+			while (j-- > 1) {
+				xtmp2 = sk_X509_value(ctx->chain, j - 1);
+				ok = ctx->get_issuer(&xtmp, ctx, xtmp2);
+				if (ok < 0)
+					goto end;
+				/* Check if we found an alternate chain */
+				if (ok > 0) {
+					/*
+					 * Free up the found cert we'll add it again later
+					 */
+					X509_free(xtmp);
+
+					/*
+					 * Dump all the certs above this point - we've found an
+					 * alternate chain
+					 */
+					while (num > j) {
+						xtmp = sk_X509_pop(ctx->chain);
+						X509_free(xtmp);
+						num--;
+						ctx->last_untrusted--;
+					}
+					retry = 1;
+					break;
+				}
 			}
-		num++;
 		}
-
-	/* we now have our chain, lets check it... */
+	} while (retry);
 
 	/* Is last certificate looked up self signed? */
 	if (!ctx->check_issued(ctx,x,x))
